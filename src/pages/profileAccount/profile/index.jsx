/* eslint-disable no-unused-vars */
import { use, useEffect, useState } from "react";
import {
  FaEnvelope,
  FaLock,
  FaUser,
  FaPhone,
  FaCalendar,
} from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { getUserById, updateUser } from "../../../services/api.user";
import { MdFace4 } from "react-icons/md";
import { updateUserInfo } from "../../../redux/features/userSlice";
import OrdersHistory from "../historyOrders";
import { useLocation } from "react-router-dom";

function AccountInfo() {
  const dispatch = useDispatch();
  const user = useSelector((state) => state.user); // L·∫•y user t·ª´ Redux
  const [showPassword, setShowPassword] = useState(false);
  const location = useLocation();
  const [activeTab, setActiveTab] = useState("account");
  const [customer, setCustomer] = useState({
    email: "",
    password: "",
    fullName: "",
    dateOfBirth: "",
    phone: "",
    gender: "",
    skin: {
      name: "",
    },
  });
  const [originalCustomer, setOriginalCustomer] = useState({});
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const fetchUserData = async () => {
      if (!user?.id) {
        console.error("User ID kh√¥ng h·ª£p l·ªá:", user);
        return;
      }

      const userData = await getUserById(user.id);
      if (userData) {
        setCustomer(userData);
        setOriginalCustomer(userData);
      }
    };

    fetchUserData();
  }, [user]);

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const tab = params.get("tab");
    if (tab === "history" || tab === "account") {
      setActiveTab(tab);
    }
  }, [location]);

  useEffect(() => {
    console.log("customer state:", customer);
  }, [customer]);
  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e) => {
    const { name, value } = e.target;

    setCustomer((prev) => ({
      ...prev,
      [name]: name === "skin" ? { id: value } : value, // X·ª≠ l√Ω ri√™ng cho skin
    }));

    validateField(name, value);
  };

  // H√†m ƒë·∫∑t l·∫°i d·ªØ li·ªáu v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  const handleReset = () => {
    setCustomer(originalCustomer);
    setErrors({});
  };

  // H√†m ki·ªÉm tra l·ªói c·ªßa t·ª´ng field
  const validateField = (name, value) => {
    let errorMsg = "";
    switch (name) {
      case "email":
        if (!value.trim()) errorMsg = "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
        else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value))
          errorMsg = "Email kh√¥ng h·ª£p l·ªá.";
        break;
      case "password":
        if (value && value.length < 8) {
          // Ch·ªâ ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng nh·∫≠p m·∫≠t kh·∫©u
          errorMsg = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.";
        }
        break;
      case "fullName":
        if (!value.trim()) errorMsg = "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
        break;
      case "phone":
        if (!/^\d{10,11}$/.test(value))
          errorMsg = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.";
        break;
      case "birthDate":
        if (!value) errorMsg = "Vui l√≤ng ch·ªçn ng√†y sinh.";
        break;
    }

    setErrors((prevErrors) => ({ ...prevErrors, [name]: errorMsg }));
  };

  // Ki·ªÉm tra form tr∆∞·ªõc khi g·ª≠i
  const validateForm = () => {
    const newErrors = {};
    Object.keys(customer).forEach((key) => {
      const errorMsg = validateField(key, customer[key]);
      if (errorMsg) newErrors[key] = errorMsg;
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n "L∆∞u th√¥ng tin m·ªõi"
  const handleSubmit = async () => {
    if (!validateForm()) {
      alert("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.");
      return;
    }

    // T·∫°o b·∫£n sao d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a
    const updatedData = { ...customer };

    // N·∫øu kh√¥ng nh·∫≠p m·∫≠t kh·∫©u, x√≥a kh·ªèi request ƒë·ªÉ tr√°nh c·∫≠p nh·∫≠t sai
    if (!updatedData.password) {
      delete updatedData.password;
    }

    // ƒê·∫£m b·∫£o `skinId` ƒë∆∞·ª£c g·ª≠i ƒëi n·∫øu c√≥ lo·∫°i da
    if (updatedData.skin?.id) {
      updatedData.skinId = updatedData.skin.id; // Chuy·ªÉn ƒë·ªïi `skin.id` th√†nh `skinId`
    }
    delete updatedData.skin; // X√≥a `skin` ƒë·ªÉ tr√°nh l·ªói API

    console.log("D·ªØ li·ªáu g·ª≠i l√™n API:", updatedData); // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i

    try {
      const updatedUser = await updateUser({ id: user.id, user: updatedData });

      //  C·∫≠p nh·∫≠t Redux Store ƒë√∫ng c√°ch
      dispatch(updateUserInfo(updatedUser));

      alert("Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      setOriginalCustomer(updatedUser); // C·∫≠p nh·∫≠t state n·∫øu c·∫ßn
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:", error);
      alert("C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div className="min-h-screen bg-[#FEFBF4] px-25 py-10">
      {/* Ti√™u ƒë·ªÅ */}
      <h1 className="tracking-wide font-sans text-2xl font-bold text-gray-900 mb-4 pb-10">
        T√ÄI KHO·∫¢N
      </h1>

      {/* Tabs */}
      <div className="flex space-x-6">
        <button
          className={`py-4 px-6 ${
            activeTab === "account"
              ? "bg-[#F7F0E4] font-semibold"
              : "text-gray-500"
          } rounded-t-lg`}
          onClick={() => {
            setActiveTab("account");
            window.history.pushState(null, "", "/profile?tab=account");
          }}
        >
          üë§ Th√¥ng tin t√†i kho·∫£n
        </button>

        <button
          className={`py-3 px-6 ${
            activeTab === "history"
              ? "bg-[#F7F0E4] font-semibold"
              : "text-gray-500"
          } rounded-t-lg`}
          onClick={() => {
            setActiveTab("history");
            window.history.pushState(null, "", "/profile?tab=history");
          }}
        >
          ‚è≥ L·ªãch s·ª≠ mua h√†ng
        </button>
      </div>

      {/* N·ªôi dung tab Th√¥ng tin t√†i kho·∫£n */}
      {activeTab === "account" && (
        <div className="bg-[#F7F0E4] p-6 rounded-b-lg text-gray-800">
          {/* <h2 className="text-lg py-3 font-semibold mb-4">
            Th√¥ng tin t√†i kho·∫£n
          </h2> */}

          {/* Email */}
          <div className="grid grid-cols-2 gap-6">
            <div className="flex items-center space-x-4 mb-4 py-3">
              <FaEnvelope className="text-gray-500" />
              <input
                type="email"
                name="email"
                value={customer?.email ?? ""} // D√πng to√°n t·ª≠ ??
                onChange={handleChange}
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
                placeholder="Nh·∫≠p email"
              />
              {errors.email && (
                <p className="text-red-500 text-sm">{errors.email}</p>
              )}
            </div>
            <div className="flex items-center space-x-4 pb-4">
              <MdFace4 className="text-gray-500" />
              <select
                name="skin"
                value={customer.skin?.id || ""} // Ki·ªÉm tra n·∫øu skin c√≥ id th√¨ l·∫•y, n·∫øu kh√¥ng th√¨ ƒë·ªÉ m·∫∑c ƒë·ªãnh l√† ""
                onChange={handleChange}
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
              >
                <option value="">Ch·ªçn lo·∫°i da</option>
                <option value="1">da th∆∞·ªùng</option>
                <option value="2">da d·∫ßu</option>
                <option value="3">da kh√¥</option>
                <option value="4">da h·ªó h·ª£p</option>
                <option value="5">da nh·∫°y c·∫£m</option>
              </select>
            </div>
            {/* M·∫≠t kh·∫©u */}
            <div>
              <FaLock className="text-gray-500" />
              <input
                type="password"
                name="password"
                value={customer.password || ""} // Tr√°nh l·ªói undefined
                onChange={handleChange}
                autoComplete="new-password"
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
                placeholder={customer.password ? "" : "*************"}
              />
            </div>
          </div>

          <h2 className="text-lg font-semibold mb-4 py-4">Th√¥ng tin c√° nh√¢n</h2>

          <div className="grid grid-cols-2 gap-6">
            {/* H·ªç t√™n */}
            <div className="flex items-center space-x-4 pb-4">
              <FaUser className="text-gray-500" />
              <input
                type="text"
                name="fullName" // C·∫≠p nh·∫≠t name th√†nh fullName
                value={customer.fullName} // S·ª≠ d·ª•ng customer.fullName thay v√¨ name
                onChange={handleChange}
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
              />
              {errors.fullName && (
                <p className="text-red-500 text-sm">{errors.fullName}</p>
              )}
            </div>

            {/* Ng√†y sinh */}
            <div className="flex items-center space-x-4 pb-4">
              <FaCalendar className="text-gray-500" />
              <input
                type="date"
                name="dateOfBirth"
                value={customer.dateOfBirth}
                onChange={handleChange}
              />
            </div>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div className="flex items-center space-x-4 pb-4">
              <FaPhone className="text-gray-500" />
              <input
                type="text"
                name="phone"
                value={customer.phone}
                onChange={handleChange}
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              />
              {errors.phone && (
                <p className="text-red-500 text-sm">{errors.phone}</p>
              )}
            </div>

            {/* Gi·ªõi t√≠nh */}
            <div className="flex items-center space-x-4 pb-4">
              <FaUser className="text-gray-500" />
              <select
                name="gender"
                value={customer.gender}
                onChange={handleChange}
                className="bg-transparent border-b border-gray-400 focus:outline-none focus:border-black w-80 p-1"
              >
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
                <option value="Kh√°c">Kh√°c</option>
              </select>
            </div>
          </div>

          {/* N√∫t H·ªßy B·ªè v√† L∆∞u Th√¥ng Tin M·ªõi */}
          <div className="flex items-center space-x-6 mt-6">
            <button
              onClick={handleReset}
              className="text-gray-700 hover:text-black px-6 py-2 rounded-md border border-gray-400"
            >
              H·ª¶Y B·ªé
            </button>
            <button
              onClick={handleSubmit}
              className="bg-black text-white px-6 py-2 rounded-md hover:bg-gray-800"
            >
              L∆ØU TH√îNG TIN M·ªöI
            </button>
          </div>
        </div>
      )}

      {/* N·ªôi dung tab L·ªãch S·ª≠ Mua H√†ng */}
      {activeTab === "history" && <OrdersHistory />}
    </div>
  );
}
export default AccountInfo;
